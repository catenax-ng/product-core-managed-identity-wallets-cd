auth:
  realm: "CX-Central"
  role: "add_wallets"
  roleMappings: "create_wallets:add_wallets,view_wallets:view_wallets,update_wallets:update_wallets,delete_wallets:delete_wallets,view_wallet:view_wallet,update_wallet:update_wallet"
  resourceId: "Cl5-CX-Custodian"
image:
  name: "catenax-ng/product-core-managed-identity-wallets_service"
  registry: "ghcr.io"
  secret: "acr-credentials"
allowEmptyPassword: "\"yes\""
db:
  jdbcDriver: "org.postgresql.Driver"
namespace: "managed-identity-wallets"
logging:
  exposed: "INFO"
wallet:
  baseWalletBpn: "BPNL000000000000"
revocation:
  refreshHour: "3"
  revocationServiceUrl: http://localhost:8086
revocationService:
  imageName: "registry.gitlab.com/gaia-x/data-infrastructure-federation-services/not/notarization-service/revocation"
  tag: "1.0.0-SNAPSHOT-quarkus-2.10.2.Final-java17"
  port: "8086"
  httpAccessLog: true
  minIssueInterval: "2"
acapy:
  imageName: "bcgovimages/aries-cloudagent"
  tag: "py36-1.16-1_0.7.4"
  ledgerUrl: "https://idu.cloudcompass.ca"
  label: "CatenaXIssuer"
  logLevel: "INFO"
  networkIdentifier: "idunion:test"
  databaseHost: "product-managed-identity-wallets-acapypostgresql"
  endpointPort: "8000"
  adminPort: "11000"
  adminUrl: "http://localhost:11000"
  secret:
    apikey: ""
    walletseed: ""
    dbaccount: ""
    dbadminuser: ""
    dbadminpassword: ""
    dbpassword: ""
    jwtsecret: ""
    walletkey: ""
ingress:
  enabled: false
acapypostgresql:
  enabled: true
  auth:
    existingSecret: "product-managed-identity-wallets-acapy-postgresql"
  secret:
    password: ""
    postgrespassword: ""
    user: ""
postgresql:
  enabled: true
  auth:
    existingSecret: "product-managed-identity-wallets-postgresql"
  primary:
    extraVolumeMounts:
      - name: initdb
        mountPath: "/docker-entrypoint-initdb.d"
    extraVolumes:
      - name: initdb
        emptyDir: {}
    initContainers:
      - name: initdb
        image: ghcr.io/catenax-ng/product-core-managed-identity-wallets-cd_initdb:latest
        imagePullPolicy: Always
        command:
          - sh
        args:
          - -c
          - |
            echo "Copying initdb sqls..."
            cp -R /initdb/* /docker-entrypoint-initdb.d
        volumeMounts:
        - name: initdb
          mountPath: "/docker-entrypoint-initdb.d"
  secret:
    password: ""
    postgrespassword: ""
    user: ""
datapool:
  grantType: "client_credentials"
  scope: "openid"
  refreshHour: "23"
managedIdentityWallets:
  secret:
    jdbcurl: ""
    authclientid: ""
    authclientsecret: ""
    bpdmauthclientid: ""
    bpdmauthclientsecret: ""
certificate:
  host: "localhost"
